// /* tslint:disable */
// //----------------------
// // <auto-generated>
// //     Generated using the NSwag toolchain v11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// // </auto-generated>
// //----------------------
// // ReSharper disable InconsistentNaming

// import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
// import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
// import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
// import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

// export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

// @Injectable()
// export class arkpzAPI {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl ? baseUrl : "";
//     }

//     /**
//      * @param crashReport (optional) 
//      * @return Success
//      */
//     accrCrashPost(crashReport: CrashReport | null | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/accr/Crash";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(crashReport);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json", 
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAccrCrashPost(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAccrCrashPost(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }

//     protected processAccrCrashPost(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }

//     /**
//      * @return Success
//      */
//     accrCrashTestGet(): Observable<string> {
//         let url_ = this.baseUrl + "/accr/Crash/test";
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "application/json"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAccrCrashTestGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAccrCrashTestGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<string>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<string>><any>_observableThrow(response_);
//         }));
//     }

//     protected processAccrCrashTestGet(response: HttpResponseBase): Observable<string> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             result200 = _responseText === "" ? null : <string>JSON.parse(_responseText, this.jsonParseReviver);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<string>(<any>null);
//     }

//     /**
//      * @param idBody (optional) 
//      * @return Success
//      */
//     accrCrashStatByIdGet(idBody: number | null | undefined, idPath: string): Observable<string> {
//         let url_ = this.baseUrl + "/accr/Crash/stat/{id}";
//         if (idPath === undefined || idPath === null)
//             throw new Error("The parameter 'idPath' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + idPath)); 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(idBody);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json", 
//                 "Accept": "application/json"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAccrCrashStatByIdGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAccrCrashStatByIdGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<string>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<string>><any>_observableThrow(response_);
//         }));
//     }

//     protected processAccrCrashStatByIdGet(response: HttpResponseBase): Observable<string> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             result200 = _responseText === "" ? null : <string>JSON.parse(_responseText, this.jsonParseReviver);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<string>(<any>null);
//     }

//     /**
//      * @return Success
//      */
//     apiDronesGet(): Observable<Drone[]> {
//         let url_ = this.baseUrl + "/api/Drones";
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "application/json"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processApiDronesGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processApiDronesGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<Drone[]>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<Drone[]>><any>_observableThrow(response_);
//         }));
//     }

//     protected processApiDronesGet(response: HttpResponseBase): Observable<Drone[]> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             result200 = _responseText === "" ? null : <Drone[]>JSON.parse(_responseText, this.jsonParseReviver);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<Drone[]>(<any>null);
//     }

//     /**
//      * @param drone (optional) 
//      * @return Success
//      */
//     apiDronesPost(drone: Drone | null | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/Drones";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(drone);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json", 
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processApiDronesPost(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processApiDronesPost(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }

//     protected processApiDronesPost(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }

//     /**
//      * @return Success
//      */
//     apiDronesByIdGet(id: number): Observable<void> {
//         let url_ = this.baseUrl + "/api/Drones/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processApiDronesByIdGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processApiDronesByIdGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }

//     protected processApiDronesByIdGet(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }

//     /**
//      * @param drone (optional) 
//      * @return Success
//      */
//     apiDronesByIdPut(id: number, drone: Drone | null | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/Drones/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(drone);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json", 
//             })
//         };

//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processApiDronesByIdPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processApiDronesByIdPut(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }

//     protected processApiDronesByIdPut(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }

//     /**
//      * @return Success
//      */
//     apiDronesByIdDelete(id: number): Observable<void> {
//         let url_ = this.baseUrl + "/api/Drones/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };

//         return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processApiDronesByIdDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processApiDronesByIdDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<void>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<void>><any>_observableThrow(response_);
//         }));
//     }

//     protected processApiDronesByIdDelete(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(<any>null);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(<any>null);
//     }

//     /**
//      * @param idBody (optional) 
//      * @return Success
//      */
//     apiDronesStatByIdGet(idBody: number | null | undefined, idPath: string): Observable<string> {
//         let url_ = this.baseUrl + "/api/Drones/stat/{id}";
//         if (idPath === undefined || idPath === null)
//             throw new Error("The parameter 'idPath' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + idPath)); 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(idBody);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json", 
//                 "Accept": "application/json"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processApiDronesStatByIdGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processApiDronesStatByIdGet(<any>response_);
//                 } catch (e) {
//                     return <Observable<string>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<string>><any>_observableThrow(response_);
//         }));
//     }

//     protected processApiDronesStatByIdGet(response: HttpResponseBase): Observable<string> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             result200 = _responseText === "" ? null : <string>JSON.parse(_responseText, this.jsonParseReviver);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<string>(<any>null);
//     }
// }

// export interface CrashReport {
//     driverId?: number | undefined;
//     dangerLevel?: CrashReportDangerLevel | undefined;
//     coords?: Coordinates | undefined;
// }

// export interface Coordinates {
//     longitude?: number | undefined;
//     latitude?: number | undefined;
// }

// export interface Drone {
//     id?: number | undefined;
//     latitude?: number | undefined;
//     longitude?: number | undefined;
//     status?: string | undefined;
// }

// export enum CrashReportDangerLevel {
//     _0 = 0, 
//     _1 = 1, 
//     _2 = 2, 
//     _4 = 4, 
//     _8 = 8, 
//     _16 = 16, 
// }

// export class SwaggerException extends Error {
//     message: string;
//     status: number; 
//     response: string; 
//     headers: { [key: string]: any; };
//     result: any; 

//     constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
//         super();

//         this.message = message;
//         this.status = status;
//         this.response = response;
//         this.headers = headers;
//         this.result = result;
//     }

//     protected isSwaggerException = true;

//     static isSwaggerException(obj: any): obj is SwaggerException {
//         return obj.isSwaggerException === true;
//     }
// }

// function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
//     if(result !== null && result !== undefined)
//         return _observableThrow(result);
//     else
//         return _observableThrow(new SwaggerException(message, status, response, headers, null));
// }

// function blobToText(blob: any): Observable<string> {
//     return new Observable<string>((observer: any) => {
//         if (!blob) {
//             observer.next("");
//             observer.complete();
//         } else {
//             let reader = new FileReader(); 
//             reader.onload = function() { 
//                 observer.next(this.result);
//                 observer.complete();
//             }
//             reader.readAsText(blob); 
//         }
//     });
// }

/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class arkpzAPI {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param userRegisterRequestModel (optional) 
     * @return Success
     */
    accrAuthRegisterPost(userRegisterRequestModel: UserRegisterRequestModel | null | undefined): Observable<any> {
        let url_ = this.baseUrl + "/accr/Auth/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userRegisterRequestModel);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAccrAuthRegisterPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccrAuthRegisterPost(<any>response_);
                } catch (e) {
                    return <Observable<any>><any>_observableThrow(e);
                }
            } else
                return <Observable<any>><any>_observableThrow(response_);
        }));
    }

    protected processAccrAuthRegisterPost(response: HttpResponseBase): Observable<any> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<any>(<any>null);
    }

    /**
     * @param model (optional) 
     * @return Success
     */
    accrAuthLoginPost(model: AuthModel | null | undefined): Observable<any> {
        let url_ = this.baseUrl + "/accr/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAccrAuthLoginPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccrAuthLoginPost(<any>response_);
                } catch (e) {
                    return <Observable<any>><any>_observableThrow(e);
                }
            } else
                return <Observable<any>><any>_observableThrow(response_);
        }));
    }

    protected processAccrAuthLoginPost(response: HttpResponseBase): Observable<any> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<any>(<any>null);
    }

    /**
     * @return Success
     */
    accrAuthLogoutPost(): Observable<void> {
        let url_ = this.baseUrl + "/accr/Auth/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAccrAuthLogoutPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccrAuthLogoutPost(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAccrAuthLogoutPost(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param crashReport (optional) 
     * @return Success
     */
    accrCrashSendCrashPost(crashReport: CrashReport | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/accr/Crash/send-crash";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(crashReport);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAccrCrashSendCrashPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccrCrashSendCrashPost(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processAccrCrashSendCrashPost(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @return Success
     */
    accrCrashTestGet(): Observable<string> {
        let url_ = this.baseUrl + "/accr/Crash/test";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAccrCrashTestGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccrCrashTestGet(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processAccrCrashTestGet(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @return Success
     */
    accrCrashStatGet(): Observable<any> {
        let url_ = this.baseUrl + "/accr/Crash/stat";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAccrCrashStatGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccrCrashStatGet(<any>response_);
                } catch (e) {
                    return <Observable<any>><any>_observableThrow(e);
                }
            } else
                return <Observable<any>><any>_observableThrow(response_);
        }));
    }

    protected processAccrCrashStatGet(response: HttpResponseBase): Observable<any> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<any>(<any>null);
    }

    /**
     * @param email (optional) 
     * @return Success
     */
    accrCrashStatByIdGet(email: string | null | undefined, id: string): Observable<any> {
        let url_ = this.baseUrl + "/accr/Crash/stat/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(email);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAccrCrashStatByIdGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccrCrashStatByIdGet(<any>response_);
                } catch (e) {
                    return <Observable<any>><any>_observableThrow(e);
                }
            } else
                return <Observable<any>><any>_observableThrow(response_);
        }));
    }

    protected processAccrCrashStatByIdGet(response: HttpResponseBase): Observable<any> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<any>(<any>null);
    }

    /**
     * @return Success
     */
    accrDronesGet(): Observable<Drone[]> {
        let url_ = this.baseUrl + "/accr/Drones";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAccrDronesGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccrDronesGet(<any>response_);
                } catch (e) {
                    return <Observable<Drone[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Drone[]>><any>_observableThrow(response_);
        }));
    }

    protected processAccrDronesGet(response: HttpResponseBase): Observable<Drone[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Drone.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Drone[]>(<any>null);
    }

    /**
     * @param drone (optional) 
     * @return Success
     */
    accrDronesPost(drone: Drone | null | undefined): Observable<any> {
        let url_ = this.baseUrl + "/accr/Drones";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(drone);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAccrDronesPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccrDronesPost(<any>response_);
                } catch (e) {
                    return <Observable<any>><any>_observableThrow(e);
                }
            } else
                return <Observable<any>><any>_observableThrow(response_);
        }));
    }

    protected processAccrDronesPost(response: HttpResponseBase): Observable<any> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<any>(<any>null);
    }

    /**
     * @return Success
     */
    accrDronesByIdGet(id: number): Observable<Drone> {
        let url_ = this.baseUrl + "/accr/Drones/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAccrDronesByIdGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccrDronesByIdGet(<any>response_);
                } catch (e) {
                    return <Observable<Drone>><any>_observableThrow(e);
                }
            } else
                return <Observable<Drone>><any>_observableThrow(response_);
        }));
    }

    protected processAccrDronesByIdGet(response: HttpResponseBase): Observable<Drone> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Drone.fromJS(resultData200) : new Drone();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Drone>(<any>null);
    }

    /**
     * @param drone (optional) 
     * @return Success
     */
    accrDronesByIdPut(id: number, drone: Drone | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/accr/Drones/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(drone);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAccrDronesByIdPut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccrDronesByIdPut(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAccrDronesByIdPut(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return Success
     */
    accrDronesByIdDelete(id: number): Observable<Drone> {
        let url_ = this.baseUrl + "/accr/Drones/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAccrDronesByIdDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccrDronesByIdDelete(<any>response_);
                } catch (e) {
                    return <Observable<Drone>><any>_observableThrow(e);
                }
            } else
                return <Observable<Drone>><any>_observableThrow(response_);
        }));
    }

    protected processAccrDronesByIdDelete(response: HttpResponseBase): Observable<Drone> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Drone.fromJS(resultData200) : new Drone();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Drone>(<any>null);
    }

    /**
     * @param idBody (optional) 
     * @return Success
     */
    accrDronesStatByIdGet(idBody: number | null | undefined, idPath: string): Observable<any> {
        let url_ = this.baseUrl + "/accr/Drones/stat/{id}";
        if (idPath === undefined || idPath === null)
            throw new Error("The parameter 'idPath' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + idPath)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idBody);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAccrDronesStatByIdGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccrDronesStatByIdGet(<any>response_);
                } catch (e) {
                    return <Observable<any>><any>_observableThrow(e);
                }
            } else
                return <Observable<any>><any>_observableThrow(response_);
        }));
    }

    protected processAccrDronesStatByIdGet(response: HttpResponseBase): Observable<any> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<any>(<any>null);
    }
}

export class UserRegisterRequestModel implements IUserRegisterRequestModel {
    role?: string | undefined;
    email!: string;
    password!: string;
    rememberMe?: boolean | undefined;

    constructor(data?: IUserRegisterRequestModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.role = data["role"];
            this.email = data["email"];
            this.password = data["password"];
            this.rememberMe = data["rememberMe"];
        }
    }

    static fromJS(data: any): UserRegisterRequestModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserRegisterRequestModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role;
        data["email"] = this.email;
        data["password"] = this.password;
        data["rememberMe"] = this.rememberMe;
        return data; 
    }
}

export interface IUserRegisterRequestModel {
    role?: string | undefined;
    email: string;
    password: string;
    rememberMe?: boolean | undefined;
}

export class AuthModel implements IAuthModel {
    email!: string;
    password!: string;
    rememberMe?: boolean | undefined;

    constructor(data?: IAuthModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"];
            this.password = data["password"];
            this.rememberMe = data["rememberMe"];
        }
    }

    static fromJS(data: any): AuthModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["rememberMe"] = this.rememberMe;
        return data; 
    }
}

export interface IAuthModel {
    email: string;
    password: string;
    rememberMe?: boolean | undefined;
}

export class CrashReport implements ICrashReport {
    dangerLevel?: CrashReportDangerLevel | undefined;
    coords?: Coordinates | undefined;

    constructor(data?: ICrashReport) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dangerLevel = data["dangerLevel"];
            this.coords = data["coords"] ? Coordinates.fromJS(data["coords"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CrashReport {
        data = typeof data === 'object' ? data : {};
        let result = new CrashReport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dangerLevel"] = this.dangerLevel;
        data["coords"] = this.coords ? this.coords.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICrashReport {
    dangerLevel?: CrashReportDangerLevel | undefined;
    coords?: Coordinates | undefined;
}

export class Coordinates implements ICoordinates {
    longitude?: number | undefined;
    latitude?: number | undefined;

    constructor(data?: ICoordinates) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.longitude = data["longitude"];
            this.latitude = data["latitude"];
        }
    }

    static fromJS(data: any): Coordinates {
        data = typeof data === 'object' ? data : {};
        let result = new Coordinates();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        return data; 
    }
}

export interface ICoordinates {
    longitude?: number | undefined;
    latitude?: number | undefined;
}

export class Drone implements IDrone {
    id?: number | undefined;
    latitude?: number | undefined;
    longitude?: number | undefined;
    status?: string | undefined;

    constructor(data?: IDrone) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.latitude = data["latitude"];
            this.longitude = data["longitude"];
            this.status = data["status"];
        }
    }

    static fromJS(data: any): Drone {
        data = typeof data === 'object' ? data : {};
        let result = new Drone();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["status"] = this.status;
        return data; 
    }
}

export interface IDrone {
    id?: number | undefined;
    latitude?: number | undefined;
    longitude?: number | undefined;
    status?: string | undefined;
}

export enum CrashReportDangerLevel {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _4 = 4, 
    _8 = 8, 
    _16 = 16, 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = function() { 
                observer.next(this.result);
                observer.complete();
            }
            reader.readAsText(blob); 
        }
    });
}